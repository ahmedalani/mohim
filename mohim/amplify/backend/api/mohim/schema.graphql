type Product
  @model
  @auth(rules: [{allow: public}])
  @key(name: "byOrder", fields: ["orderID"]) {
  id: ID!
  title: String!
  description: String
  image: String!
  images: [String!]!
  options: [String!]

  avgRating: Float!
  ratings: Int

  price: Float!
  oldPrice: Float

  orders: [OrderProduct] @connection(keyName: "byProduct", fields: ["id"])
}

type CartProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  userSub: String!
  quantity: Int!
  option: String

  productID: ID!
  product: Product @connection(fields: ["productID"])
}

type Address @model @auth(rules: [{allow: public}]) {
  id: ID!
  userSub: String!

  lable: String!
  addressText: String!
  city: String!
}

# many-to-many connection
type OrderProduct
  @model(queries: null)
  @key(name: "byOrder", fields: ["orderID", "productID"])
  @key(name: "byProduct", fields: ["productID", "orderID"]) {
  id: ID!
  orderID: ID!
  productID: ID!
  order: Order! @connection(fields: ["orderID"])
  product: Product! @connection(fields: ["productID"])
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  userSub: String!

  products: [OrderProduct] @connection(keyName: "byOrder", fields: ["id"])

  addressID: ID!
  address: Address @connection(fields: ["addressID"])

  deliveryNotes: String
}

# type Blog @model {
#   id: ID!
#   name: String!
#   posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
# }

# type Post @model @key(name: "byBlog", fields: ["blogID"]) {
#   id: ID!
#   title: String!
#   blogID: ID!
#   blog: Blog @connection(fields: ["blogID"])
#   comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
# }

# type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
#   id: ID!
#   postID: ID!
#   post: Post @connection(fields: ["postID"])
#   content: String!
# }
